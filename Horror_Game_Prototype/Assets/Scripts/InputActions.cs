//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Controls"",
            ""id"": ""6e9eed07-a8fc-46c2-b447-9a0cf16c210c"",
            ""actions"": [
                {
                    ""name"": ""ToggleCameras"",
                    ""type"": ""Button"",
                    ""id"": ""e1b12a70-dca9-4ffe-83ef-f6c2e9859f7d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleLeftDoor"",
                    ""type"": ""Button"",
                    ""id"": ""2bca4275-f499-41e2-a023-b5aa0362bee6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleRightDoor"",
                    ""type"": ""Button"",
                    ""id"": ""3ba2b56e-fceb-47b2-9ead-265b24f3ebb4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c4c5fb4f-228f-4c88-8fc1-d94c3790fcbf"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls"",
                    ""action"": ""ToggleCameras"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9be0e8c7-03d8-495e-982a-77f6ef0ec4c5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls"",
                    ""action"": ""ToggleLeftDoor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0543b17-3580-465d-a352-a5730fe6ef11"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls"",
                    ""action"": ""ToggleRightDoor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Controls"",
            ""bindingGroup"": ""Controls"",
            ""devices"": []
        }
    ]
}");
        // Controls
        m_Controls = asset.FindActionMap("Controls", throwIfNotFound: true);
        m_Controls_ToggleCameras = m_Controls.FindAction("ToggleCameras", throwIfNotFound: true);
        m_Controls_ToggleLeftDoor = m_Controls.FindAction("ToggleLeftDoor", throwIfNotFound: true);
        m_Controls_ToggleRightDoor = m_Controls.FindAction("ToggleRightDoor", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controls
    private readonly InputActionMap m_Controls;
    private List<IControlsActions> m_ControlsActionsCallbackInterfaces = new List<IControlsActions>();
    private readonly InputAction m_Controls_ToggleCameras;
    private readonly InputAction m_Controls_ToggleLeftDoor;
    private readonly InputAction m_Controls_ToggleRightDoor;
    public struct ControlsActions
    {
        private @PlayerInputActions m_Wrapper;
        public ControlsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleCameras => m_Wrapper.m_Controls_ToggleCameras;
        public InputAction @ToggleLeftDoor => m_Wrapper.m_Controls_ToggleLeftDoor;
        public InputAction @ToggleRightDoor => m_Wrapper.m_Controls_ToggleRightDoor;
        public InputActionMap Get() { return m_Wrapper.m_Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsActions set) { return set.Get(); }
        public void AddCallbacks(IControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlsActionsCallbackInterfaces.Add(instance);
            @ToggleCameras.started += instance.OnToggleCameras;
            @ToggleCameras.performed += instance.OnToggleCameras;
            @ToggleCameras.canceled += instance.OnToggleCameras;
            @ToggleLeftDoor.started += instance.OnToggleLeftDoor;
            @ToggleLeftDoor.performed += instance.OnToggleLeftDoor;
            @ToggleLeftDoor.canceled += instance.OnToggleLeftDoor;
            @ToggleRightDoor.started += instance.OnToggleRightDoor;
            @ToggleRightDoor.performed += instance.OnToggleRightDoor;
            @ToggleRightDoor.canceled += instance.OnToggleRightDoor;
        }

        private void UnregisterCallbacks(IControlsActions instance)
        {
            @ToggleCameras.started -= instance.OnToggleCameras;
            @ToggleCameras.performed -= instance.OnToggleCameras;
            @ToggleCameras.canceled -= instance.OnToggleCameras;
            @ToggleLeftDoor.started -= instance.OnToggleLeftDoor;
            @ToggleLeftDoor.performed -= instance.OnToggleLeftDoor;
            @ToggleLeftDoor.canceled -= instance.OnToggleLeftDoor;
            @ToggleRightDoor.started -= instance.OnToggleRightDoor;
            @ToggleRightDoor.performed -= instance.OnToggleRightDoor;
            @ToggleRightDoor.canceled -= instance.OnToggleRightDoor;
        }

        public void RemoveCallbacks(IControlsActions instance)
        {
            if (m_Wrapper.m_ControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlsActions @Controls => new ControlsActions(this);
    private int m_ControlsSchemeIndex = -1;
    public InputControlScheme ControlsScheme
    {
        get
        {
            if (m_ControlsSchemeIndex == -1) m_ControlsSchemeIndex = asset.FindControlSchemeIndex("Controls");
            return asset.controlSchemes[m_ControlsSchemeIndex];
        }
    }
    public interface IControlsActions
    {
        void OnToggleCameras(InputAction.CallbackContext context);
        void OnToggleLeftDoor(InputAction.CallbackContext context);
        void OnToggleRightDoor(InputAction.CallbackContext context);
    }
}
